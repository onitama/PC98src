
//-------------------------------------------------------------------
//	LSP.EXE : light SOUP processor ver.Ax reference manual
//			onion software (c) 1994
//-------------------------------------------------------------------
//		      プログラミング・マニュアル
//-------------------------------------------------------------------

・ソースファイルの作り方

	ソースファイル（プログラム）は命令と実行の順序を記したものです。
	ソースファイルはMS-DOSのテキストエディタで作成します。
	CやBASICと同じく、命令はファイルの先頭から順に実行されていきます。
	LSPで実行されるソースファイルの拡張子は、.DSにしておいてください。


・命令の書き方

	命令（ステートメント）は、プログラムの流れを制御したり、画面や
	ファイルなどの入出力を行なうためのものです。
	大きくわけて、プログラム制御命令と、入出力制御命令の２つからなり
	多くの命令が存在します。命令はすべて小文字で記述してください。
	命令と命令の間を:（ｺﾛﾝ）で区切って1行に複数の命令を記述することも
	可能です。

	例：
		print "こんにちは" : %4=%1*5+1

	また、1行の中で;（ｾﾐｺﾛﾝ）以降はコメントとみなし無視されます。

	例：
		locate 4,0 : print "(^_^)"		; 顔マーク表示

	スペース、タブは見やすくするために自由に入れられます。
	命令に付加するパラメータと、命令の間は原則としてスペースで空けて
	おいた方が読みやすくていいでしょう。


・数式

	命令のパラメータに数式を指定する場所では、以下の数値と演算子が
	使用できます。

		-32767〜32768	10進整数
		$0000〜$FFFF	16進整数（0xでも可）
		'A'		文字コード（1ﾊﾞｲﾄ）
		+,-,*,/		加算，減算，乗算，除算
		&,|,^		and,or,xor
		=,<,>,!		条件式（同じ，小さい，大きい，同じでない）

	式の評価は常に左から順に行なわれます。乗除算の優先はありません。
	たとえば、

		2+7*2

	は、18になります。カッコを使っての優先順位変更もありません。
	このマニュアルにおいて、パラメータの説明で、

		p1=0〜3(1)

	とあった場合は、p1のとれる値が0〜3まで、省略した場合の値が1
	であることを示しています。


・文字列

	命令のパラメータに文字列を指定する場所では、文字列を"(ﾀﾞﾌﾞﾙｸｫｰﾃｰｼｮﾝ)
	で囲んでください。


・ラベル

	ラベルは*(ｱｽﾀﾘｽｸ)の後に0〜49の数字で示します。
	ラベルは行の先頭になければなりません。また、原則としてラベルのある
	行には命令を書かないようにしてください。


・バッファ

	LSPではグラフィックのデータや、音楽のデータをためておくための
	バッファが用意されています。音楽データのバッファは通常16K（オプ
	ションで拡張可）で、グラフィックのバッファは通常128K（オプション
	で拡張可能）存在します。グラフィックのバッファは、SRCバッファと
	呼ばれ、指定はセグメント（16byte）単位になります。


・代入命令

	%p1=p2					変数%p1にp2を代入

	%の後に0〜49の数字をつけたものを変数として扱うことができます。
	%0〜%49の変数は、-32767〜32768の整数を代入しておくことができ、
	数式の中で使うことができます。
	基本的な代入は、

		%0=5

	のように%p1=p2の形式で行ないます。これで、%p1にp2の値が代入され
	ます。%2=%2+1のように使うことで、%2の値に1を足すこともできます。


・プログラム制御命令

	goto *label				指定ラベルにジャンプ
	gosub *label				指定ラベルにサブルーチンジャンプ
	return					サブルーチンから復帰

		*label : ラベル名

		gotoは、指定したラベルに無条件でジャンプします。
		gosubは、サブルーチンジャンプです。
		gosub〜returnは最大16重までネスティングが可能。

	if p1					条件を満たしていればその行の命令を実行

		p1 : 条件式（数式）

		p1の条件式が満たされていれば、それ以降の命令を
		実行する。満たされていない場合は、次の行に移る。
		BASICと違い、その行の次の命令との間には:(ｺﾛﾝ)を
		入れなければいけないので注意してください。
		例： if %1=5 : print "%1は5です"
		条件式としては、＜，＞，＝，！の4つを使用できます。
		BASICと違い、>=，=<や、<>がないので注意が必要です。
		例：%1<7（%1は7より小さい），%2!6（%2は6ではない）

	repeat p1				ループの始まりの場所を示す
	loop					ループの始まりに戻る

		p1 : くり返しの回数（数式）

		repeat〜loopの間をくり返し実行します。
		repeat命令は、くり返しの開始地点を示します。
		原則として、1行の中でrepeat命令の後には命令を書かない
		ようにしてください。
		loop命令は最後に通過したrepeat命令まで戻ります。つまり、

			repeat 5
			print "やっほー"
			loop

		のようなプログラムは、「やっほー」を5回表示します。
		repeat命令のくり返し回数を省略または、0を指定すると
		無限ループになります。
		repeat〜loopを含む部分をさらにループさせるようなネスト
		構造は記述できません。

	run "filename"				指定したLSPのファイルに制御を移す

		別のファイルに書かれたLSPのプログラムを実行します。
		例：
			run "MENU2"

		が実行されると、いままでのプログラムはなくなり"MENU2.DS"
		というファイルのプログラムが最初から実行されます。
		画面の状態、バッファ、変数の内容はすべて保持されます。

	child "filename"			子プロセスでMS-DOSファイル実行

		MS-DOSのファイルを実行した後、ひき続きLSPのプログラムを
		実行します。ファイル名は、拡張子も含めて完全に書いておいて
		下さい。たとえば、

			child "ZMAP.COM"

		が実行されると、"ZMAP.COM"というMS-DOSファイルが実行された
		後、LSPのプログラムに戻ります。この時、子プロセス実行後の
		返り値が、%0に自動的に代入されます。
		child命令では、オプションなども含めてファイル実行をすること
		ができます。たとえば、

			child "MAG.EXE","-K","TEST.MAG"

		という命令は、MS-DOSのコマンドラインから、

			MAG -K TEST.MAG

		と入力したのと同じことになります。オプションは、2つまで
		記述することができます。
		child命令を実行した後も変数の内容は保持されますが、
		SRCバッファは一時的に開放するのでMASK画面データや読み
		込んだデータなどが保持される保証はありません。
		子プロセス実行時は、LSP本体もメモリに常駐しているので
		フリーエリアが120Kほど減少します。また、FM音源割り込み、
		マウス割り込み、V-SYNC割り込みはLSPで使用したままに
		なるので、実行したファイルがこれらの割り込みを使用する
		場合には、最悪暴走する可能性がありますから十分注意して
		使用してください。

	exec "filename"				MS-DOSのファイルを実行する

		execは子プロセスに渡すわけではなく、LSP.EXEを終了してから
		プログラムを直接実行します。ですから、execで指定したソフトが
		終了しても、LSPには戻ってこないので注意して下さい。
		ファイル名は、拡張子も含めて完全に書いておいてください。
		例：
			exec "GAME.EXE"

	escape p1				[ESC]で中断するかどうかを設定する

		p1=0〜2(1)
		  =0 : [ESC]で中断することができない
		  =1 : プログラム制御，基本制御以外は[ESC]で中断できる
		  =2 : いつでも[ESC]で中断できる

		プログラムの実行モードを指定します。p1を2に指定すると
		いつでも中断できるようになりますが、処理スピードが低下します。
		最初は1のモードになっています。

	end					プログラム終了

		LSPのプログラムを終了してMS-DOSに戻ります。
		グラフィック画面はOFFになり、通常のテキスト表示になります。

	break					プログラム中断

		LSPのプログラムを終了してMS-DOSに戻ります。
		end命令との違いは、終了時に画面モードなどをもとの状態に
		もどしません。テキストがOFFされていれば、そのままMS-DOS
		に戻ってしまいます。グラフィック画面の状態もそのままに
		なります。


・基本入出力制御命令

	print "str",p1				テキストにメッセージ表示

		テキスト画面にカーソル位置から"str"の文字を表示します。
		p1に数式を書いておくと、メッセージの後に数値
		を表示することが可能です。
		例： print "%1 の値＝",%1

	locate p1,p2				テキストのカーソル位置を指定

		p1=0〜79(0)
		     : カーソル位置Ｘ
		p2=0〜24(0)
		     : カーソル位置Ｙ

		カーソルのX,Y位置を指定します。
		画面は80x25文字として扱います。

	keywait					スペースキーが押されるのを待つ

		スペースキー、またはマウスのボタンが押されるまで
		そのままの状態で待ちます。

	inkey p1,p2,p3				キー入力

		文字コードがp1〜p2の間のキーが押されるまで、
		キー入力待ちをします。結果は、変数%0にp1を0
		とした値で返ります。
		ただしp3の値が1の時は、リアルタイムキー入力になります。
		主要なキーが押されているかどうかの情報が%0に入ります。
		値の示す内容は、[2]=1/[8]=2/[4]=4/[6]=8/[spc]=16/[esc]=32/
		[x]=64/[z]=128を合計したものになります。
		例：　print "press key [1]-[4]":inkey '1','4'

	rnd %val,p1				0〜p1の乱数を代入

		%valで示される変数に、0〜p1の乱数を代入します。
		例：　rnd %0,3 : print "０〜３の乱数＝",%0

	poke p1,p2				SRCバッファ書き込み
	peek %val,p1				SRCバッファ読み込み

		poke,peekはバッファのデータを加工、読み出しをする時などに
		使用します。どちらもp1はSRCバッファのアドレス（0x0000〜0xffff）
		になります。扱う値は0〜255までのバイト値です。たとえば、

			peek %1,5 : poke 12,%1

		が実行されると、SRCバッファのアドレス5の内容を%1に
		読みだした後、アドレス12に%1の内容を書き込みます。


・グラフィック制御命令

	cls p1,p2				グラフィック画面クリア

		p1=0〜3(1)
		  =0 : キーバッファを初期化、テキスト表示モードON
		  =1 : テキスト画面クリア
		  =2 : グラフィック画面クリア
		  =3 : テキスト表示モードOFF、グラフィックPAGE0,1クリア
		p2=0〜15(0)
		     : グラフィック画面をクリアする色

		画面をクリアするための命令です。
		画面がクリアされると、カーソルは左上に戻ります。
		グラフィック画面をクリアした場合は、マウスのチェック
		ボックスデータもクリアされます。
		通常は、cls 3を使うといいでしょう。

	screen p1,p2,p3				グラフィック画面設定

		p1=0〜1(1)
		     : グラフィック画面モード 1=400line/0=200line mode
		p2=0〜1(0)
		     : 表示ページ (0,1)
		p2=0〜1(1)
		     : グラフィック画面表示スイッチ 1=ON/0=OFF

		画面モードの設定と初期化を行ないます。
		マウスのチェックボックスデータも同時にクリアされます。
		通常の640x400、グラフィック画面ONは、

			screen 1,0,1

		になります（または、screenのみ）。

	color p1,p2,p3,p4			文字表示色設定

		p1=0〜15(15)
		     : グラフィック画面表示文字色
		p2=0〜7(1)
		     : 1=太文字/2=斜体/4=超斜体
		p3=0〜3(0)
		     : 0=通常/1=センタリング/2=右そろえ
		p4=0〜255(0)
		     : 0=通常/1=影付き/2=ふち取り

		グラフィック画面に文字を表示させる時の色や属性を
		設定します。p2のパラメータは、組み合わせた指定が
		できます（太文字＋斜体の場合3になる）。

	page p1,p2				グラフィック画面ページ設定

		p1=0〜1
		     : 書き込みページ指定（命令実行の対象となるページ）
		p2=0〜1
		     : 表示ページ指定（画面に見えるページ）

		グラフィック画面のページ設定をします。

	console p1,p2,p3,p4			メッセージウインドウ設定

		p1=0〜24
		     : ウインドウ開始行
		p2=0〜24
		     : ウインドウ終了行
		p3=0〜79
		     : メッセージ開始オフセット
		p4=16〜399(16)
		     : 行送り幅設定

		mess命令で表示するメッセージの表示範囲を設定します。
		console命令が実行されると、設定したウインドウ内がクリア
		され、カーソル位置がウインドウの左上に設定されます。
		p1,p2,p3の設定値を省略した場合は、前回設定した値のままに
		なるので、console命令のみを実行すれば、設定されている
		ウインドウのクリアになります。
		p4は、1行を何ドットにするかを指定するものです。通常は、
		1行16ドットですが、行間をあけたい時などに指定します。

	mess "str",p1,p2			グラフィック画面メッセージ表示

		p1=1〜32767
		     : チェックボックスID
		p2=0〜15
		     : 枠表示色

		console命令で設定されたメッセージウインドウ内の
		グラフィック画面に"str"の文字列を表示します。
		表示される文字の色や属性は、color命令で設定された
		ものになります。普通に画面にメッセージを表示する場合は、

			mess "テストメッセージ"

		のように記述します。
		mess命令は、メッセージウインドウ内に文字列を表示しますが、
		1行に収まる文字数をオーバーしないように指定してください。
		ウインドウの下端をオーバーした時は、スクロールして表示され
		ます。

		p1は、文字列をチェックボックスとして扱って、メッセージを
		クリックできるようにする指定をするためのものです。
		p1の指定を省略した場合は、チェックボックスの登録は
		されません。（詳しくはマウス制御命令を参照して下さい）
		p2に0〜15の色を指定すると、文字のバックにその色で枠を
		つけて目立たせる効果を出すことができます。
		p2の指定を省略した場合は枠は表示されません。

	gprt x,y,"str",p1,p2			グラフィック画面メッセージ表示

		x,y=0〜639,0〜399
		     : メッセージの左上座標
		p1=1〜32767
		     : チェックボックスID
		p2=0〜15
		     : 枠表示色

		指定した座標から、グラフィック画面に"str"の文字列を
		表示します。表示される文字の色や属性は、color命令で
		設定されたものになります。
		普通に画面にメッセージを表示する場合は、

			gprt 320,100,"テストメッセージ"

		のように記述します。
		p1は、文字列をチェックボックスとして扱って、メッセージを
		クリックできるようにする指定をするためのものです。
		p1の指定を省略した場合は、チェックボックスの登録は
		されません。（詳しくはマウス制御命令を参照して下さい）
		p2に0〜15の色を指定すると、文字のバックにその色で枠を
		つけて目立たせる効果を出すことができます。
		p2の指定を省略した場合は枠は表示されません。

	contrast p1,p2				パレット輝度設定

		p1=0〜16(15)
		     : パレット輝度 0=完全に消える/16=標準輝度
		p2=0〜15(0)
		     : 0=すぐに変化/1〜15=ゆっくり変化

		カレーパレット全体の輝度を設定します。
		パレットの内容は、あらかじめpalette命令もしくは、
		rgb,mag命令などでファイルからデータを読み込んで
		設定されているものになります。
		p2は変化スピードを設定します。値が大きいほど、
		ゆっくりとしたスピードになります。ゆっくり変化する
		指定をすると、変化が終わる前に次の命令を実行します。
		変化が終わるまで次の命令を実行したくない場合は、
		palwait命令を使ってください。
		例：	contrast 16,1		;フェードイン
		例：	contrast 0,1		;フェードアウト

	palette p1,p2,p3			パレット設定

		p1=0〜15
		     : パレットコード
		p2=$000〜$fff
		     : 設定する色コード
		p3=0〜1(0)
		     : 1=すぐに設定/0=contrast命令がきたら設定

		パレットの内容を設定します。
		p3の値が0の時は、パレットのバッファに設定だけをして
		contrastで全体を一気に設定できるようにします。

	palwait					パレット変化待ち

		contrast命令でゆっくり変化させた時に、変化が終了する
		まで待ちます。

	mono					モノクロモード

		パレット0〜15が、16段階輝度のグレースケールに設定
		されます。

	pause p1				時間待ち

		p1=1〜999(100)
		     : 待ち時間

		p1の値だけ時間待ちをします。
		値が大きいほど長く待ちます。

	boxf x1,y1,x2,y2,p1			矩形領域塗りつぶし

		x1,y1=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		x2,y2=0〜639(639),0〜399(399)
		     : 矩形の右下座標
		p1=0〜15(15)
		     : 塗りつぶす色

		グラフィック画面の指定された領域を塗りつぶします。

	scroll p1,p2,p3				グラフィック画面スクロール

		p1=0〜1(0)
		     : スクロールの方向 0=上/1=下
		p2=1〜400(400)
		     : スクロールを実行する回数
		p3=1〜4(1)
		     : 一度にスクロールさせるドット数

		グラフィック画面のスムーズスクロールを行ないます。
		この命令を使う時には、必ずページ0にもとの絵を、
		ページ1にスクロールして出てくる絵を表示しておく必要が
		あります。
		scroll命令は、GDCを使いVRAMのアドレスを直接変化させる
		のでとてもスムーズにスクロールをします。ただし、
		スクロールさせた後はVRAMアドレスが正常でなくなるので、
		screen命令で初期化を行なわなければならなくなります。


・マウス制御命令

	mswait %val1, %val2, %val3		マウス入力待ち

		マウスカーソルを表示して、画面上の座標がクリックされる
		のを待ちます。
		mswait命令終了後は、%0に自動的にクリックされたボタンの
		情報が代入されます。

			%0 が 1 の時、マウスの左ボタンがクリックされた
			%0 が 2 の時、マウスの右ボタンがクリックされた

		%val2には、マウスカーソルのX座標が、%val3には、マウス
		カーソルのY座標が代入されます。
		また、マウスカーソルの座標に該当するチェックボックスIDが、
		%val1に代入されます。
		チェックボックスIDとは、マウスでクリック可能な範囲を
		あらかじめ指定したもので、msbox命令、またはmess,gprt命令の
		ID指定により登録できます。たとえば、(0,0)-(25,25)の範囲を
		ID=1として登録しておけば、その範囲内でクリックされた時に
		%val1に1が代入されるようになります。
		該当するチェックボックスIDがなかった場合は、%val1には0が
		代入されます。
		マウスの移動は、カーソルキーやテンキーでもコントロール可能
		になっています。左ボタン，右ボタンは、[X][Z]キーで代用する
		ことができます。また、[SHIFT]キーを押しながらだと、高速に
		移動させることができます。

	msset x,y				マウスカーソル座標設定

		x,y=0〜639(0),0〜399(0)
		     : マウスカーソルのX,Y座標

		マウスカーソルを設定した座標に強制的に移動させます。

	msarea x1,y1,x2,y2			マウスカーソル移動範囲設定

		x1,y1=0〜639(0),0〜399(0)
		     : 移動範囲の左上X,Y座標
		x2,y2=0〜639(639),0〜399(399)
		     : 移動範囲の右下X,Y座標

		マウスカーソルが移動できる範囲を設定します。

	msbox x1,y1,x2,y2,p1,p2			チェックボックス領域設定

		x1,y1=0〜639(0),0〜399(0)
		     : 移動範囲の左上X,Y座標
		x2,y2=0〜639(639),0〜399(399)
		     : 移動範囲の右下X,Y座標
		p1=1〜32767
		     : チェックボックスID
		p2=0〜15
		     : 枠表示色

		チェックボックスの登録をします。
		チェックボックスは、マウスカーソルでクリックした領域を
		知るためのもので、画面上の任意の範囲をチェックボックスID
		とともに登録できます。チェックボックスは、mswait命令に
		よってクリックした座標に該当するIDを調べることができます。
		p2の枠表示色を指定することにより、領域を塗りつぶして
		目立たせることができます。p2を省略した場合には、領域の
		設定だけが行なわれます。

		チェックボックスは、msbox命令で設定する他にmess,gprt命令
		を使っても登録することができます。これは、表示した文字列
		の領域をチェックボックスとして登録するものです。
		これらの登録も含めて、画面上に最大64ヶ所のチェックボックス
		が設定可能です。また、チェックボックスの登録データは、
		cls命令でグラフィック画面をクリアした時、screen命令が実行
		された時にすべてクリアされます。それ以外の命令では、
		チェックボックスのデータは残ったままなので注意してください。

	mschr x,y,hx,hy				マウスカーソルCHR設定

		x,y=0〜639(0),0〜399(0)
		     : 登録キャラクタの左上X,Y座標
		hx,hy=0〜23(0),0〜23(0)
		     : キャラクタ内でカーソルが差し示す座標

		マウスカーソルのキャラクタを画面上にあるデータに
		入れ替えます。マウスカーソルは、24x24dot 16colorで
		描かれている必要があります。
		hx,hyは、マウスカーソルとして登録したキャラクタの中で
		どのドットが中心になるかを設定するもので、(0,0)を指定
		すると、キャラクタの左上がマウスカーソルの差し示して
		いる座標になります。


・音楽制御命令

	midi "filename"				音楽データファイル読み込み

		MIDIでの音楽演奏用にデータファイルを読み込みます。
		データファイルは、Annex MIDIというMMLによる音楽ツール
		で作成されるオブジェクトファイルでなければなりません。
		拡張子は必ず、.AXT になります。
		MIDIによる音楽演奏をするためには、MIDIによる音楽演奏モード
		でLSP.EXEを起動する必要があります。
		/A オプションをつけて、

			LSP /A ????.DS

		のような形で起動してください。

	music "filename",p1			音楽データファイル読み込み

		p1=0〜(0)
		     : 音楽用バッファのオフセット(byte)

		FMサウンドボードでの音楽演奏用のデータファイルを
		読み込みます。データファイルは、MUSIC LALFという
		音楽ツールで作成されるオブジェクトファイルでなければ
		なりません。拡張子は必ず、.MLO になります。

		p1は音楽演奏用のバッファ内にロードする際のオフセットを
		指定します。オフセットはバイト単位の指定です。
		バッファに複数の曲データをためておくのに使うことができ
		ます。

	mplay p1				音楽演奏スタート

		p1=0〜(0)
		     : 音楽用バッファのオフセット(byte)

		FM音源、またはMIDIでの音楽演奏を開始します。
		あらかじめ、music,midi命令により音楽用バッファに
		演奏データをロードしておく必要があります。
		p1は、音楽用バッファ内のオフセットを指定します。
		バッファに複数のデータが置かれている時に指定
		するのに使います。
		MIDI演奏時は、p1の値は無効になります。

	mstop p1				音楽演奏ストップ

		p1=0〜15(0)
		     : フェードアウトスピード

		FM音源、またはMIDIでの音楽演奏を中断します。
		p1は、フェードアウトするスピードを指定します。
		0だとすぐに停止。数が大きいほどゆっくり停止します。
		フェードアウト時は、完全に音が止まるまで次の命令を
		実行しません。

	mtick %val				音楽演奏カウンターチェック

		現在演奏中のカウンターを%valに代入します。
		カウンターは演奏開始時は0で、だんだん増えていきます。
		音楽と同期させた処理をする時に使用します。


・ファイル読み込み命令

	mag "file",x,y				MAGファイル表示

		x,y=0〜639(0),0〜399(0)
		     : ロードする左上X,Y座標

		16色画像データを読み込んで画面に表示します。
		拡張子は必ず、.MAG になります。MAGファイルは、
		マルチペイントなどで使用されている画像フォーマットです。
		パレット情報もロードされますが、contrast命令を実行
		するまではセットされません。

		mag命令で表示できる画像データにはいくつかの制限があります。
		まず、横のサイズが64dotの倍数で640以内であること、アナログ
		16色のデータであること、ファイルサイズが65536bytes以内である
		ことが必要です。透明色および表示開始位置データは無効になり
		ます。また、縦方向は400ラインまでしか表示できません。


	rgb "filename"				RGBファイル読み込み

		アナログパレットのデータファイルを読み込みます。
		拡張子は必ず、.RGB になります。RGBファイルは、
		MAKI,MAGなどで使われている48バイトのアナログパレット
		データファイル形式です。
		この命令で読み込んでも、contrast命令を実行するまでは
		実際の画面のパレットは変化しません。

	bload "filename",p1			バイナリファイル読み込み

		p1=0〜(0)
		     : SRCバッファのオフセット(SEG)

		ファイルの内容をそのままSRCバッファに読み込みます。
		拡張子も含めて正確にファイル名を指定してください。
		p1はSRCバッファのオフセット（セグメント単位）になります。

	bsave "filename",p1,p2			バイナリファイル書き込み

		p1=0〜(0)
		     : SRCバッファのオフセット(SEG)
		p2=0〜(0)
		     : セーブするファイルのサイズ(SEG)

		SRCバッファの内容をファイルに書き出します。
		p1はSRCバッファのオフセット、p2はセーブするサイズ
		になります。どちらも単位が16byte（セグメント）単位
		なので注意してください。


・画面コピー，転送命令

	pcopy p1,sx,sy				ページ間コピー

		p1=0〜1(0)
		     : 転送元ページ
		sx,sy=dot size(640,400)
		     : コピーをする範囲

		グラフィック画面のページ間を高速にコピーします。
		p1で指定したページの内容を、もう一方のページに
		sx,syで指定した大きさだけコピーします。

	gcopy p1,x,y,sx,sy,p2,x2,y2		画面矩形コピー

		p1=0〜1(0)
		     : 転送元ページ
		x,y=0〜639(0),0〜399(0)
		     : 転送元の左上X,Y座標
		p2=0〜1(0)
		     : 転送先ページ
		x2,y2=0〜639(0),0〜399(200)
		     : 転送先の左上X,Y座標
		sx,sy=dot size(640,200)
		     : コピーをする範囲

		グラフィック画面の指定した範囲を高速にコピーします。
		異なるページへのコピーも可能です。

	mcopy p1,p2,p3				マスク合成コピー

		p1=0〜1(0)
		     : 転送先ページ
		p2=0〜4095(0)
		     : 0=高速転送/1〜4095=フェードパターン
		p3=0〜16(0)
		     : 透明色(16=全色)

		転送元ページの内容すべてを、もう一方のページに
		指定された色を透明色として合成しながらコピーします。
		p2の値が0なら高速に合成コピーをします。1以上の時は、
		値によって様々なフェードパターンでコピーします。
		mcopy命令を実行すると、SRCバッファを32K使用してマスク
		画面を自動的に作成します。

	mask p1					マスク画面作成

		p3=0〜16(0)
		     : 透明色(16=全色)

		現在表示されている画面の内容から、指定した色を透明色とした
		マスク画面を作成します。マスク画面には、SRCバッファを32K
		使用します。これにより、get,put,mput,mcopy命令を使った
		重ね合わせ、マスク処理が可能になります。

	get x,y,sx,sy,p1			合成CHR取り込み

		x,y=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		sx,sy=dot size(640,100)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG)

		マスク画面（透明色）の情報を含めたグラフィックデータ
		（CHRデータ）をSRCバッファに取り込みます。
		取り込んだデータは、put,mput命令により、画面上に重ね合わせ
		て表示させることができるようになります。

		CHRデータのサイズは、以下のような計算で求めることが
		できます。

		　　CHRデータサイズ(byte)＝(sx/8)*sy*5

		p1のSRCバッファのオフセット指定は16byte（SEG）単位なので
		注意してください。また、CHRデータサイズが65535を越えるものは
		扱うことができないので、範囲を分割するなどしてください。
		sxは、16dot単位での指定になります。get命令で取り込んだCHR
		データの構造は、以下のようになります。

		　　Ｂ，Ｒ，Ｇ，Ｅ，Ｍ（各2byte） x (sx/16)

		B,R,G,Eはグラフィックの各プレーンのデータ、Mはマスク画面の
		データになります。それがX方向にsx/16の数だけ集まって1ライン
		分のデータになります。

	put x,y,sx,sy,p1			CHR合成（手前）

		x,y=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		sx,sy=dot size(640,100)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG)

		グラフィックデータ（CHRデータ）を画面上に表示します。
		CHRデータは、あらかじめget命令で取り込んだものが
		SRCバッファ上になければなりません。
		sx,syは、get命令で指定したものと同じ値にしておきます。

	mput x,y,sx,sy,p1			CHR合成（奥）

		x,y=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		sx,sy=dot size(640,100)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG)

		グラフィックデータ（CHRデータ）を画面上に表示します。
		put命令とほとんど同じですが、mput命令はマスク画面の
		透明色にのみ表示させます。
		つまり、現在表示中の（マスク画面を作成済の）グラフィック
		画面の奥に合成されたような効果になります。

	lget x,y,sx,sy,p1,p2			CHR取り込み

		x,y=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		sx,sy=dot size(640,400)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG単位)
		p2=0〜15(15)
		     : 有効プレーン指定

		グラフィックデータ（CHRデータ）をSRCバッファに取り込み
		ます。取り込んだデータは、lput命令により、画面上に表示
		させることができるようになります。
		get命令と違い、マスク画面のデータを含めませんので、
		マスク画面作成の必要がなく、高速でメモリの消費も少なくて
		すみます。ただし、重ね合わせや合成はできなくなります。
		p2は、有効プレーンの指定をします。1,2,4,8が各プレーンに
		対応しています。16色のCHRデータは15を指定すればよいこと
		になります。8色,4色,2色のCHRデータ作成時に指定してください。
		CHRデータのサイズは、以下のような計算で求めることが
		できます。

		　　CHRデータサイズ(byte)＝(sx/8)*sy*有効プレーン数

		p1のSRCバッファのオフセット指定は16byte（SEG）単位なので
		注意してください。sxは、8dot単位での指定になります。
		lget命令で取り込んだCHRデータの構造は、以下のようになります。

		　　1プレーンのデータ × (sx/8) × sy

		B,R,G,Eはグラフィックの各プレーンのデータになります。
		X方向のデータ×Y方向のライン数で1プレーン分のデータ。
		それが各プレーン分集まって1つのCHRデータになります。

	lput x,y,sx,sy,p1,p2			CHR表示

		x,y=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		sx,sy=dot size(640,400)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG単位)
		p2=0〜15(15)
		     : 有効プレーン指定

		グラフィックデータ（CHRデータ）を画面上に表示します。
		CHRデータは、あらかじめlget命令で取り込んだものが
		SRCバッファ上になければなりません。
		sx,syは、lget命令で指定したものと同じ値にしておきます。
		p2は、有効プレーンの指定をします。1,2,4,8が各プレーンに
		対応しています。16色のCHRデータは15を指定すればよいこと
		になります。8色,4色,2色のCHRデータ作成時に指定してください。


・命令一覧

　　プログラム制御命令

	goto *label				指定ラベルにジャンプ
	gosub *label				指定ラベルにサブルーチンジャンプ
	return					サブルーチンから復帰
	if p1					条件を満たしていればその行の命令を実行
	repeat p1				ループの始まりの場所を示す
	loop					ループの始まりに戻る
	run "filename"				指定したLSPのファイルに制御を移す
	child "filename"			子プロセスでMS-DOSファイル実行
	exec "filename"				MS-DOSのファイルを実行する
	escape p1				[ESC]で中断するかどうかを設定する
	end					プログラム終了
	break					プログラム中断

　　基本入出力制御命令

	print "str",p1				テキストにメッセージ表示
	locate p1,p2				テキストのカーソル位置を指定
	keywait					スペースキーが押されるのを待つ
	inkey p1,p2,p3				キー入力
	rnd %val,p1				0〜p1の乱数を代入
	poke p1,p2				SRCバッファ書き込み
	peek %val,p1				SRCバッファ読み込み

　　グラフィック制御命令

	cls p1,p2				グラフィック画面クリア
	screen p1,p2,p3				グラフィック画面設定
	color p1,p2,p3,p4			文字表示色設定
	page p1,p2				グラフィック画面ページ設定
	console p1,p2,p3			メッセージウインドウ設定
	mess "str",p1,p2			グラフィック画面メッセージ表示
	gprt x,y,"str",p1,p2			グラフィック画面メッセージ表示
	contrast p1,p2				パレット輝度設定
	palette p1,p2,p3			パレット設定
	palwait					パレット変化待ち
	mono					モノクロモード
	pause p1				時間待ち
	boxf x1,y1,x2,y2,p1			矩形領域塗りつぶし
	scroll p1,p2,p3				グラフィック画面スクロール

　　マウス制御命令

	mswait %val1, %val2, %val3		マウス入力待ち
	msset x,y				マウスカーソル座標設定
	msarea x1,y1,x2,y2			マウスカーソル移動範囲設定
	msbox x1,y1,x2,y2,p1,p2			チェックボックス領域設定
	mschr x,y,hx,hy				マウスカーソルCHR設定

　　音楽制御命令

	midi "filename"				音楽データファイル読み込み
	music "filename",p1			音楽データファイル読み込み
	mplay p1				音楽演奏スタート
	mstop p1				音楽演奏ストップ
	mtick %val				音楽演奏カウンターチェック

　　ファイル読み込み命令

	mag "file",x,y				MAGファイル表示
	rgb "filename"				RGBファイル読み込み
	bload "filename",p1			バイナリファイル読み込み
	bsave "filename",p1,p2			バイナリファイル書き込み

　　画面コピー，転送命令

	pcopy p1,sx,sy				ページ間コピー
	gcopy p1,x,y,sx,sy,p2,x2,y2		画面矩形コピー
	mcopy p1,p2,p3				マスク合成コピー
	mask p1					マスク画面作成
	get x,y,sx,sy,p1			合成CHR取り込み
	put x,y,sx,sy,p1			CHR合成（手前）
	mput x,y,sx,sy,p1			CHR合成（奥）
	lget x,y,sx,sy,p1,p2			CHR取り込み
	lput x,y,sx,sy,p1,p2			CHR表示


//-------------------------------------------------------------------
//	    end of light SOUP processor ver.Ax reference manual
//			onion software (c) 1994
//-------------------------------------------------------------------
