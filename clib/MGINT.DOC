/*---------------------------------------------------------------------------
	ＭＧＩＮＴヘルプドキュメント
	pc98 graphic interface "mgint.h" / 1992(c)onion software/Ana./XKD lab.
	'mgint.h' , 'mgint.obj'
---------------------------------------------------------------------------*/

	"MGINT" ('mgint.obj') は、PC9801用の基本的なグラフィック機能を
	サポートするturboＣ(++)用の制御関数群です。
	使用する場合は、

		#include <stdio.h>
		#include <fcntl.h>
		#include <dos.h>
		#include "mgint.h"		; use graphics interface
		#include "mgint.inc"

	のファイルを最初にインクルードしておく必要があります。
	必ずスモールモデルでコンパイルして下さい。
	"mgint.h"を使う場合は、1つのオブジェクトファイルもリンクします。

	例:（コマンドラインから）
		tcc -ms test.c mgint.obj


	/*-------------------------------------------------------------------
		introduction
	-------------------------------------------------------------------*/

	MGINTはPC98のグラフィック画面を使用したアプリケーションをＣ言語で作る
	のに適したモジュールで、次のような機能があります。

		◎高速で簡単なグラフィック操作
		◎通常の漢字メッセージに加え、強調文字や斜体などの表示
		◎GDCを使用したグラフィック画面の上下スクロール
		◎アナログパレットの制御
		◎MS-DOSからのバイナリファイル読み込み，書き込み

	以下のモジュールをMGINTと合わせて使用することで、さらに強力な
	アプリケーションを作成することができます。詳細は、それぞれの
	ドキュメントファイルを参照して下さい。

		・GMAP.H	キャラクタを使ったマップ表示，擬似スプライト
		・GPOL.H	ポリゴンを使用した３Ｄ表示
		・MGL.H		MAG形式のグラフィックを展開
		・PLAY.H	FM音源（2203）による音楽演奏
		・EMIOB.H	ファイル管理システム，オリジナルDOS

	さらに機能拡張した豪華版 "GINT" も用途に合わせてご利用下さい。

	オリジナルにあたる、"GINT" ('gint.obj')と比べて、以下の機能が変更
	されていますが、そのぶんコンパクトになっていますので、グラフィック
	画面を使用した簡単なツールやゲームに使用するのに適しています。

	・gint.obj から削られた機能

		◎漢字メッセージ表示の際の半角文字サポート
		◎オリジナルフォント画面PUT
		◎PD4形式グラフィック展開
		◎ASKA形式グラフィック展開
		◎V-Syncを使用したアナログパレット関連の関数

	・gint.obj にはない機能

		◎1ﾄﾞｯﾄ単位のPSET,POINT
		◎アナログパレットを直接変更


	/*-------------------------------------------------------------------
		command reference of "mgint.h"
	-------------------------------------------------------------------*/

	◎グラフィック画面初期化
		ginit( int Lines,int SPage,int Sswitch );

		Lines	= 0(200line) , 1(400line)
		SPage	= 0(page0) , 1(page1)
		Sswitch	= 0(screen off) , 1(screen on)

	　グラフィックのスクリーンモードを指定して初期化を行ないます。
	　最初に必ずこの関数を使ってグラフィック画面を初期化して下さい。
	　VRAM,TEXT VRAM,パレットの内容は変化しません。
	　アナログ16色モードに自動的にセットされます。
	　以下の項目をチェックして、値がセットされます。

	　char	_board16_set	16色ボードがあるか（0=ない,1=ある）
	　char	_gdc_clock	GDCのクロック（0=2.5Mhz,1=5Mhz）
	　char	_gc_set		GRCGがあるか（0=ない,1〜=ある）
	　char	_egc_set	EGCがあるか（0=ない,1=ある）

	　16色ボードがない場合は、"gint.h"の関数群は使えないので、
	　チェックして終了させるようにして下さい。


	◎グラフィック画面クリア
		gcls( int Color );

		Color	= 0-15 (palette code)

	　グラフィック画面を指定した色でクリアします。
	　画面モードやTEXT VRAMの内容は変化しません。


	◎テキスト画面関係
		t_cls();   t_off();   t_on();

	　t_cls でテキスト画面をクリアします。
	　t_off,t_on はテキスト画面の一時的なON/OFFを行ないます。
	　内容は変化しませんが、終了時に t_on していないとDOS画面が
	　見えなくなるので注意が必要です。


	◎グラフィック画面漢字PUT
		kprt( int X,int Y,int Color,char *st );

		X	= 0-639 (X-axis)
		Y	= 0-399 (Y-axis)
		Color	= 0-15 (palette code) ( bit4=1 : 太い文字で出力 )
					      ( bit5=1 : 斜体文字/1 )
					      ( bit6=1 : 斜体文字/2 )
		*st	= 出力する文字列 (ptr.)

	　グラフィック画面の指定した座標から、漢字を含めた文字列を出力します。
	　画面の右端に行っても改行しませんので、１行が画面に収まる量を指定して
	　下さい。文字列はMS-DOSで使用しているシフトJISフォーマットのものを
	　そのまま使用できます。半角が含まれている場合は、オリジナルのフォント
	　で出力されます。CR+LFやBSなどのコントロールコードは認識されません。
	　ただし、TABコードは一応サポートしています（8カラムごと）。
	　カラーコードに16をORすると、漢字が１ドット横に太くされて読みやすく
	　なります。また、カラーコードに32もしくは、64をORすると斜体文字表示と
	　なります。32の場合は軽くそった書体、64だと激しく傾いた書体になります。


	◎グラフィック画面ボックスフィル
		GraphicBoxf( int X1,int Y1,int X2,int Y2,int Color );

		X1	= 0-639 (左上 X-axis)
		Y1	= 0-399 (左上 Y-axis)
		X2	= 0-639 (右下 X-axis)
		Y2	= 0-399 (右下 Y-axis)
		Color	= 0-15 (palette code)

	　指定したグラフィック画面の領域内を塗りつぶします。


	◎グラフィック画面矩形コピー
		gcopy( int X1,int Y1,int SX,int SY,int X2,int Y2 );

		X1	= 0-639 (転送元 X-axis)
		Y1	= 0-399 (転送元 Y-axis)
		SX	= 0-639 (転送ｻｲｽﾞ X-axis)
		SY	= 0-399 (転送ｻｲｽﾞ Y-axis)
		X2	= 0-639 (転送先 X-axis)
		Y2	= 0-399 (転送先 Y-axis)

	　指定したグラフィック画面の領域を、別の場所にコピーします。


	◎グラフィック画面ドットセット
		pset( int X,int Y,int Color );

		X	= 0-639 (X-axis)
		Y	= 0-399 (Y-axis)
		Color	= 0-15 (palette code)

	　指定したグラフィック座標のドットをセットします。


	◎グラフィック画面ドット読み取り
		int point( int X,int Y );

		X	= 0-639 (X-axis)
		Y	= 0-399 (Y-axis)

	　指定したグラフィック座標のドットのパレットコードを読み取ります。



	◎漢字１文字PUT
		KanjiGputc( int KANJI,int X,int Y,int Color );

		X	= 0-639 (X-axis)
		Y	= 0-399 (Y-axis)
		Color	= 0-15 (palette code) ( bit4=1 : 太い文字で出力 )
		KANJI	= 出力する漢字コード (シフトJIS)

	　グラフィック画面の指定した座標から、指定したコードの漢字１文字を
	　出力します。


	◎横ドット２倍変換
		hdbl();

	　グラフィック画面の左半分(0,0)-(319,399)を横２倍に変換します。
	　見かけ上320x200の表示をするために使います。


	◎GDCグラフィック画面スムーズスクロール
		gscroll( int sc_dir,int sc_len,int sc_step );

		sc_dir	= 0(上) , 1(下)
		sc_len	= 1-400 (lines)
		sc_step = 1-4 (lines)

	　グラフィック画面のスムーズスクロールを行ないます。
	　sc_dirで指定した方向に、sc_lenで指定したライン数だけスクロール
	　します。sc_stepは１度にスクロールするライン数です。通常は１ですが、
	　スクロールのスピードが遅い時などは増やすとよいでしょう。
	　スクロールする前の画面は必ずページ０に、スクロールして出てくる
	　画面の情報は必ずページ１に置いておかなければなりません。
	　この関数実行後は、VRAMのアドレスが狂ってしまうので、一度 ginit で
	　初期化し直して下さい。
	　主に、800ラインの絵をスクロール表示するための関数です。


	◎グラフィック画面ページ切り替え
		set_page( int apage, int dpage );

		apage	= 0(page0) , 1(page1)
		dpage	= 0(page0) , 1(page1)

	　グラフィック画面のページ切り替えを行ないます。
	　apageは描画を行なうページ（アクティブページ），
	　dpageは画面に表示させておくページ（ディスプレイページ）です。


	◎アナログパレット変更
		set_palet( int Pal , int Code );

		Pal	= 0-15 (palette code)
		Code	= 0-4095 (color code)

	　指定したパレットコードにカラーを割り当てます。
	　この関数を実行した時点で、パレットが変わります。


	◎キー入力バッファクリア
		int jinit();

	　リアルタイムキー入力などで溜まったキーバッファをクリアします。
	　DOSに戻る直前に実行すると、戻ってから勝手に文字が入力されることが
	　なくなります。


	◎ゲーム・アプリケーション用キー入力
		int joyin();

	　ゲームなどに必要なテンキーのキー入力情報、ジョイスティックからの
	　入力情報を調べます。返り値はintで内容は以下の通りです。

		bit0 (  1) = テンキーの[2]，ジョイスティック下
		bit1 (  2) = テンキーの[8]，ジョイスティック上
		bit2 (  4) = テンキーの[4]，ジョイスティック左
		bit3 (  8) = テンキーの[6]，ジョイスティック右
		bit4 ( 16) = スペースキー
		bit5 ( 32) = [ESC]キー
		bit6 ( 64) = [X]キーまたはジョイスティックＡボタン
		bit7 (128) = [Z]キーまたはジョイスティックＢボタン


	◎リアルタイムキー入力
		int kinp( int matrix );

		matrix	= 0-15 ( key board matrix )

	　キーボードのリアルタイムキー入力情報をintで返します。
	　キーボードマトリックス番号と、各ビットの内容はPC98の
	　テクニカルマニュアルなどを参照して下さい。


	◎バイナリファイル読み込み
		seg_load( char *fname, int load_seg , int load_size )

		*fname	  = ファイル名（文字列PTR.）
		load_seg  = 読み込むバッファのセグメントアドレス
		load_size = 読み込むサイズ（byte）

		返り値	  : 	0  正常終了
				1  エラー（指定したファイルが存在しない）

	　バイナリファイルを指定したセグメントアドレスから読み込みます。
	　バッファはあらかじめ、allocmemで確保しておいて下さい。


	◎バイナリファイル書き出し
		seg_save( char *fname, int save_seg , int save_size )

		*fname	  = ファイル名（文字列PTR.）
		save_seg  = 書き出すバッファのセグメントアドレス
		save_size = 書き込むサイズ（byte）

		返り値	  : 	0  正常終了
				1  エラー（何らかの理由で書き込みができない）

	　指定したセグメントアドレスからのデータをバイナリファイルに
	　書き出します。
	　バッファはあらかじめ、allocmemで確保しておいて下さい。


	/*-------------------------------------------------------------------
		copyright
	-------------------------------------------------------------------*/


	'gint.h','gint.obj'		(c)1992 onion software ( expect * )
	*gscroll			(c)1992 XKD laboratory


/*---------------------------------------------------------------------------
	pc98 graphic interface "mgint.h" / 1992(c)onion software/Ana./XKD lab.
	Brief information of 'mgint.obj'
---------------------------------------------------------------------------*/

