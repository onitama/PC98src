
//-------------------------------------------------------------------
//	SOUP : sequential output control processor ver.C
//			onion software (c) 1993
//-------------------------------------------------------------------
//		       プログラミング・マニュアル
//-------------------------------------------------------------------

・数式

	命令のパラメータに数式を指定する場所では、以下の数値と演算子が
	使用できます。

		-32767〜32768	10進整数
		$0000〜$FFFF	16進整数（0xでも可）
		'A'		文字コード（1ﾊﾞｲﾄ）
		+,-,*,/		加算，減算，乗算，除算
		&,|,^		and,or,xor
		=,<,>,!		条件式（同じ，小さい，大きい，同じでない）

	命令の説明で、

		p1=0〜3(1)

	とあった場合は、p1のとれる値が0〜3まで、省略した場合の値が1
	であることを示しています。


・文字列

	命令のパラメータに文字列を指定する場所では、文字列を"(ﾀﾞﾌﾞﾙｸｫｰﾃｰｼｮﾝ)
	で囲んでください。


・ラベル

	ラベルは*(ｱｽﾀﾘｽｸ)の後に0〜99の数字で示します。
	ラベルは行の先頭になければなりません。また、原則としてラベルの後には
	命令を書かないようにしてください。


・バッファ

	SOUPではグラフィックのデータや、音楽のデータをためておくための
	バッファが用意されています。音楽データのバッファは通常16K（オプ
	ションで拡張可）で、グラフィックのバッファは通常256K（オプション
	で拡張可能）存在します。グラフィックのバッファは、SRCバッファと
	呼ばれ、指定はセグメント単位（16byte）になります。


・プログラム制御命令

	goto *label				指定ラベルにジャンプ
	gosub *label				指定ラベルにサブルーチンジャンプ
	return					サブルーチンから復帰

		*label : ラベル名

		gosub〜returnは最大16重までネスティングが可能。

	if p1					条件を満たしていればその行の命令を実行

		p1 : 条件式（数式）

		p1の条件式が満たされていれば、それ以降の命令を
		実行する。満たされていない場合は、次の行に移る。
		BASICと違い、その行の次の命令との間には:(ｺﾛﾝ)を
		入れなければいけないので注意してください。
		例： if %1=5 : print "%1は5です"

	repeat					ループの始まりの場所を示す
	loop					ループの始まりに戻る

		loop命令は最後に通過したrepeat命令まで戻ります。

	run "filename"				指定したsoupのファイルに制御を移す
	exec "filename"				MS-DOSのファイルを実行する

		execは子プロセスに渡すわけではなく、SOUP.EXEを終了してから
		プログラムを直接実行します。ですから、execで指定したソフトが
		終了しても、soupには戻ってこないので注意して下さい。

	end					プログラム終了


・基本入出力制御命令

	print "str",p1				テキストにメッセージ表示

		p1に数式を書いておくと、メッセージの後に数値
		を表示することが可能です。
		例： print "%1 の値＝",%1

	locate x,y				テキストのカーソル位置を指定
	keywait					スペースキーが押されるのを待つ
	inkey p1,p2,p3				キー入力

		文字コードがp1〜p2の間のキーが押されるまで、
		キー入力待ちをします。結果は、変数%0にp1を0
		とした値で返ります。
		ただしp3の値が1の時は、リアルタイムキー入力になります。
		主要なキーが押されているかどうかの情報が%0に入ります。
		値の示す内容は、[2]=1/[8]=2/[4]=4/[6]=8/[spc]=16/[esc]=32/
		[x]=64/[z]=128を合計したものになります。
		例：　print "press key [1]-[4]":inkey '1','4'

	escape p1				[ESC]で中断するかどうかを設定する

		p1=0〜2(1)
		  =0 : [ESC]で中断することができない
		  =1 : プログラム制御，基本制御以外は[ESC]で中断できる
		  =2 : いつでも[ESC]で中断できる

		プログラムの実行モードを指定します。p1を2に指定すると
		いつでも中断できるようになりますが、処理スピードが低下します。
		最初は1のモードになっています。

	%p1=p2					変数%p1にp2を代入
	rnd %val,p1				0〜p1の乱数を代入
	poke p1,p2				SRCバッファ書き込み
	peek %val,p1				SRCバッファ読み込み

		poke,peekはバッファのデータを加工、読みだしする時などに
		使用します。どちらもp1はSRCバッファのアドレス（0x0000〜0xffff）
		になります。扱う値は0〜255までのバイト値です。


・グラフィック制御命令

	cls p1,p2				グラフィック画面クリア

		p1=0〜3(1)
		  =0 : キーバッファを初期化、テキスト表示モードON
		  =1 : テキスト画面クリア
		  =2 : グラフィック画面クリア
		  =3 : テキスト表示モードOFF、グラフィックPAGE0,1クリア
		p2=0〜15(0)
		     : グラフィック画面をクリアする色

	screen p1,p2,p3				グラフィック画面設定

		p1=0〜1(1)
		     : グラフィック画面モード 1=400line/0=200line mode
		p2=0〜1(0)
		     : 表示ページ (0,1)
		p2=0〜1(1)
		     : グラフィック画面表示スイッチ 1=ON/0=OFF

	color p1,p2,p3,p4			文字表示色設定

		p1=0〜15(15)
		     : グラフィック画面表示文字色
		p2=0〜7(1)
		     : 1=太文字/2=斜体/4=超斜体（組み合わせも可）
		p3=0〜3(0)
		     : 0=通常/1=センタリング/2=右そろえ/3=別フォントモード
		p4=0〜255(0)
		     : 0=通常/1=影付き/2=ふち取り/3=パレット変化モード

	width p1,p2,x,y,x2,y2			ドットモード設定

		p1=0〜4(1)
		     : 0=640x400(16color)/1=320x200(16)/2=160x100(16)/
		     : 3=640x400(16)+160x100(16)/4=320x200(4)
		p2=0〜3(1)
		     : 縦dot数補正 0=1dot/1=2dot/3=4dot
		     : 通常は0、160x100モード時のみ1を指定。
		x,y=dot
		     : 表示ウインドゥサイズ(max=256,200)
		x2,y2=dot
		     : ウインドゥ表示位置

	page p1,p2				グラフィック画面ページ設定

		p1=0〜1
		     : 書き込みページ指定（命令実行の対象となるページ）
		p2=0〜1
		     : 表示ページ指定（画面に見えるページ）

	gprt x,y,"str",p1			グラフィック画面メッセージ表示

		x,y=0〜639,0〜399
		     : メッセージの左上座標
		p1=0〜1(0)
		     : 0=指定したページに出力/1=0,1ページに同時出力

	contrast p1,p2				パレット輝度設定

		p1=0〜16(15)
		     : パレット輝度 0=完全に消える/16=標準輝度
		p2=0〜15(0)
		     : 0=すぐに変化/1〜15=ゆっくり変化

	palette p1,p2,p3			パレット設定

		p1=0〜15
		     : パレットコード
		p2=$000〜$fff
		     : 設定する色コード
		p3=0〜1(0)
		     : 1=すぐに設定/0=contrast命令がきたら設定

	palwait					パレット変化待ち

		contrast命令でゆっくり変化させた時に、変化が終了する
		まで待つ。

	mono					モノクロモード
	pause p1				時間待ち
	boxf x1,y1,x2,y2,p1			矩形領域塗りつぶし

		x1,y1=0〜639(0),0〜399(0)
		     : 矩形の左上座標
		x2,y2=0〜639(639),0〜399(399)
		     : 矩形の右下座標
		p1=0〜15(15)
		     : 塗りつぶす色

	scroll p1,p2,p3				グラフィック画面スクロール

		p1=0〜1(0)
		     : スクロールの方向 0=上/1=下
		p2=1〜400(400)
		     : スクロールを実行する回数
		p3=1〜4(1)
		     : 一度にスクロールさせるドット数


・音楽制御命令

	music "file",p1				MLOファイル読み込み
	mplay p1				音楽演奏スタート
	mstop p1				音楽演奏ストップ

		MLOはMUSIC LALFで作成するオブジェクトファイルです。
		p1は音楽演奏用のバッファ($0000-$2000)オフセットを指定
		します。バッファに複数の曲データをためておくのに使いま
		す。mstopのp1は、フェードアウトスピードを指定します。
		0だとすぐに停止。数が大きいほどゆっくり停止します。

	mtick %val				音楽演奏カウンターチェック

		現在演奏中のカウンターを%valに代入します。
		カウンターは演奏開始時は0で、だんだん増えていきます。
		音楽と同期させた処理をする時に使用します。


・ファイル読み込み命令

	rgb "file"				RGBファイル読み込み
	mag "file",x,y				MAGファイル表示
	aska "file",x,y				ASKファイル表示
	qp "file",x,y				QPファイル読み込み

		x,yはロードしてくる画面上の座標を指定します。
		パレット情報もロードされますが、contrast命令を実行
		するまではセットされません。

	magcel "file",p1,p2			MAGファイルバッファ読み込み

		wpdモードのCELデータとしてMAGファイルをバッファに
		ロードします。画面上には表示されません。
		p1はSRCバッファのオフセット(SEG)、p2は0だと通常(HWPD)
		モード、1だと、低解像(WPD)モードのデータになります。

	bload "file",p1

		ファイルの内容をそのままバッファに読み込みます。
		p1はSRCバッファのオフセット(SEG)になります。

	bsave "file",p1,p2

		バッファの内容をファイルに書き出します。
		（ファイルを上書きして消してしまわないよう注意して下さい）
		p1はSRCバッファのオフセット(SEG)になります。
		p2はセーブするサイズ(SEG)になります。


・画面コピー，転送命令

	anime p1,p2,p3,p4			アニメーション表示

		p1=1〜63(1)
		     : アニメーション開始No.
		p2=1〜63(end)
		     : アニメーション終了No.
		p3=1〜15(3)
		     : 表示スピード
		p4=0〜(0)
		     : 1ｺﾏごとの表示オフセット

		anime命令は、qpでロードしたアニメーションデータを
		再生します。

	pcopy p1,sx,sy				ページ間コピー
	gcopy p1,x,y,sx,sy,p2,x2,y2		ページ間矩形コピー

		p1=0〜1(0)
		     : 転送元ページ
		p2=0〜1(0)
		     : 転送先ページ
		sx,sy=dot size(640,400)
		     : コピーをする範囲

	mcopy p1,p2,p3				マスク合成コピー

		p1=0〜1(0)
		     : 転送先ページ
		p2=0〜4095(0)
		     : 0=高速転送/1〜4095=フェードパターン
		p3=0〜16(0)
		     : 透明色(16=全色)

	mask p1					マスク画面作成

		p3=0〜16(0)
		     : 透明色(16=全色)

	get x,y,sx,sy,p1			合成CHR取り込み
	put x,y,sx,sy,p1			CHR合成（手前）
	mput x,y,sx,sy,p1			CHR合成（奥）
	lget x,y,sx,sy,p1,p2			CHR取り込み
	lput x,y,sx,sy,p1,p2			CHR表示

		x,y=dot(0,0)
		     : 矩形の左上座標
		sx,sy=dot size(640,400)
		     : 矩形のサイズ
		p1=0〜(0)
		     : SRCバッファのオフセット(SEG単位)
		p2=0〜15(15)
		     : 有効プレーン指定

		getはmaskデータも含めてバッファに画像を取り込みます。
		put,mputはそのデータを表示するための命令です。
		lget,lputはmaskデータを含めないので、重ね合わせが
		できませんが、メモリ効率がよく高速です。


・オブジェクト制御命令

	＊さらに詳しい説明は、「オブジェクト制御について」を参照して下さい。

	speed p1				標準表示スピード設定
	wset p1,p2,x,y,p3,p4,p5,p6,sx,sy	新規object設定

		p1=0〜9		unit no.
		p2=0〜15	sequence code
		x,y=0〜255	unit座標X,Y
		p3=0〜(0)	srcバッファオフセット(SEG)
		p4,p5=64〜(256) 拡大倍率X,Y
		p6=0〜127(32)	回転角度
		sx,sy=1〜16(64) objectサイズX,Y

		sequence code は、下の表にある14の機能の中から、
		ユニットの出力を設定します。

	wact p1,p2,p3,p4,p5,p6,p7		object変化設定

		p1=0〜9		unit no.
		p2=0〜7		blockdata no.
		p3=0〜(-1)	実行回数(-1=無限)	flag
		p4=0〜(1)	加算定数		px
		p5=0〜(0)	論理積定数(0=なし)	and
		p6=0〜16(0)	折り返し定数(0=なし)	bounce value
		p7=0〜16(0)	加速度定数(0=なし)	ppx

	wprm p1,p2,p3,p4			objectパラメータ設定

		p1=0〜79	unit no.*8 + blockdata no.
		p2=0〜7		parameter code
		p3=0〜		設定する値
		p4=0,1		0なら設定、1だと%0に読みだし

	wenv p1,p2,p3,p4,p5,p6			object移動設定

		p1=0〜9		unit no.
		p2=0〜7		blockdata no.
		p3=0〜		目標値（相対値）
		p4=1〜(20)	目標値までにかかる時間
		p5=0〜5(3)	変化エンベロープ
		p6=0〜1(0)	折り返し設定スイッチ(0=なし,1=あり)

	wgo p1,x,y,p2,p3,p4			object座標移動

		p1=0〜9		unit no.
		x,y=0〜255	目標になる座標X,Y
		p2=1〜(20)	目標値までにかかる時間
		p3=0〜5(3)	変化エンベロープ
		p4=0〜1(0)	折り返し設定スイッチ(0=なし,1=あり)

	wmove p1,p2				object移動表示

		p1=0〜(0)	画面表示時間(0=スペースキーを押すまで表示)
		p2=0〜15(3)	表示スピード

	wcheck p1,p2,p3				object移動終了まで表示

		p1=0〜9		unit no.
		p2=0〜7(1,2)	チェックするblockdata no.
		p3=0〜15(3)	表示スピード

	wdraw p1,p2,p3				WPDモード画面表示

		p1=0〜(0)	srcバッファオフセット(SEG)
		p2=64〜(256)	拡大倍率
		p3=0〜127(32)	回転角度

	wsfx p1,p2,p3				特殊画面処理指定
	wget p1,sx,sy,x,y			画面CEL取り込み

		p1=0〜(0)	srcバッファオフセット(SEG)
		sx=1〜256(256)	取り込みXサイズ
		sy=1〜256(256)	取り込みYサイズ
		x,y=0〜255	取り込み画面座標

		wgetは常にHWPDモードのデータを画面から取り込みます。

	//---------------------------------------------------------------
	//
	//	sequence code :				blockdata number :
	//
	//	 0/none					0/AXIS X(XX)
	//	 1/hrot2 XX,YY,ANG,ZX,CS		1/AXIS Y(YY)
	//	 2/hcel XX,YY,SX,SY,ANG,ZX,ZY,CS	2/SIZE X(SX)
	//	 3/hcel2 XX,YY,SX,SY,ANG,ZX,ZY,CS	3/SIZE Y(SY)
	//	 4/cel XX,YY,SX,SY,ANG,ZX,ZY,CS		4/ANGLE(ANG)
	//	 5/rot2 XX,YY,ANG,ZX,CS			5/ZOOM X(ZX)
	//	 6/rot XX,YY,ZX,ZY,CS			6/ZOOM Y(ZY)
	//	 7/zrot	XX,YY,CS			7/CHR SEG(CS)
	//	 8/bcls XX
	//	 9/putv XX,YY,SX,SY,CS			parameter code :
	//	10/mput XX,YY,SX,SY,CS
	//	11/lput XX,YY,SX,SY,CS,ANG		0/flag
	//	12/vcls XX				1/xx
	//	13/palet XX,ANG				2/px
	//	14/prot2 XX,YY,ANG,ZX,CS		3/and
	//						4/offset
	//						5/bounce value
	//						6/system
	//						7/ppx
	//
	//---------------------------------------------------------------


・オブジェクト制御について

	オブジェクト制御はsoupの特徴の１つである、グラフィックの回転拡大
	およびアニメーション表示をすべて行なう部分で、細かい制御ができる
	ぶん複雑なシステムになっています。使用法を覚えれば、物体の移動や
	アニメーション表示、回転など多くの機能がインタプリタから手軽に扱
	うことができるようになります。
	ここではその詳細な使い方と構造を説明していきます。

	1. 画面モード

	オブジェクト制御の前にグラフィックの画面モードを把握する必要があり
	ます。グラフィックの回転拡大などはあらかじめ画面のモード設定や、
	モードに合わせたグラフィックデータの準備をしなければなりません。
	SOUPでは基本的に width命令で指定できる５つの画面モードがあります。
	通常使われるのは、width 0 で指定される 640x400/16color の標準的な
	画面です。しかし、グラフィックの回転拡大、スプライトの回転などの
	機能は、width 0 以外のモード、320x200/16color などを指定しなければ
	なりません。ただし、これは擬似的に320x200に見えるように内部で調整
	しているにすぎないので、実際は横のドット数は640になっています。
	width 0 以外のモードでは、扱うグラフィックデータを特別な形で持って
	いなければなりません。このデータは、MAGCEL命令でMAGデータを読みこむ
	か、WGET命令で画面上の図形をグラフィックデータとして取りこむことで
	作成できます。また、グラフィックデータには、WPD形式とHWPD形式の２つ
	があり選択することができます。WPD形式は2dot/byteのデータで、メモリ
	の消費が少なく高速ですが、回転や拡大時にムラができてしまい美しくあ
	りません。それに対してHWPD形式は1dot/byteのデータで、メモリはWPD形式
	の２倍消費してスピードも落ちますが、回転や拡大は美しいものが得られ
	ます。この２つは、後で説明するシーケンスコードの指定で選択できます。
	WPDとHWPDの形式は混在して使用できるので、背景の絵はWPD形式で、物体
	の絵はHWPD形式という感じに使い分けるとよいでしょう。


	2. システムの構造

	オブジェクト制御では、ユニットという単位を基本に設定を行ないます。
	ユニットとは、物体の座標、回転角などのデータを１組にした単位だと考
	えて下さい。例えば、ＵＦＯの形が飛んでいるアニメーションを作りたい
	場合には、飛んでいるＵＦＯ１つが１つのユニットとなります。ＵＦＯを
	３つ飛ばしたい場合には、３つのユニットが必要になります。また、ユニ
	ットは画面上を飛んでゆくような小さい絵だけでなく、背景となる絵や、
	画面全体に表示される図形などにも使用します。
	１つのユニットには下の８つのデータが記憶されます。

		0. AXIS_X (XX) Ｘ座標 ( 0-255 )
		1. AXIS_Y (YY) Ｙ座標 ( 0-255 )
		2. SIZE_X (SX) Ｘ方向サイズ ( 1-256 )
		3. SIZE_Y (SY) Ｙ方向サイズ ( 1-256 )
		4. ANGLE (ANG) 回転角 ( 0-255 )
		5. ZOOM_X (ZX) Ｘ方向倍率 ( 1-32767 )
		6. ZOOM_Y (ZY) Ｙ方向倍率 ( 1-32767 )
		7. CHRSEG (CS) データ格納アドレス ( 0000h-????h )

	これをSOUPから設定するには、

		wset p1,p2,XX,YY,CS,ZX,ZY,ANG,SX,SY

		( p1=0〜9		unit no. )
		( p2=0〜15		sequence code )
		( XX,YY=0〜255		unit座標X,Y )
		( CS=0〜(0)		srcバッファオフセット(SEG) )
		( ZX,ZY=64〜(256) 	拡大倍率X,Y )
		( ANG=0〜255(32)	回転角度 )
		( SX,SY=1〜(64) 	objectサイズX,Y )

	の命令を使用します。
	１度設定したユニットのパラメータの一部を後から変更する場合には、

		wprm p1,p2,p3,p4

		( p1=0〜79	unit no.*8 + blockdata no. )
		( p2=0〜7	parameter code )
		( p3=0〜	設定する値 )
		( p4=0,1	0なら設定、1だと%0に読みだし )

	を使用します。ブロックデータNo.は、上に示したユニットに含まれる
	８つのデータの番号を指します。


	3. シーケンスコード

	ユニット設定での一番のポイントは、シーケンスコード(sequence code)
	にあります。シーケンスコードとは、そのユニットがどのような動作を
	するかを指定するもので、このコード（番号）により背景の表示になったり、
	小さな絵（スプライト）の表示になったりします。このシーケンスコードは
	0から14までの15種類があり、それぞれ別の働きを持っています。
	またシーケンスコードによって扱うパラメータの数や意味が変わることも
	あるので、XX,YY,ANG,ZX,CS…など、どのパラメータが何の意味かも把握して
	おかなければなりません。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  0 / none

		何もしません。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  1 / hrot2 XX,YY,ANG,ZX,CS

		HWPD形式の背景を表示します。ズーム、回転ができます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  2 / hcel XX,YY,SX,SY,ANG,ZX,ZY,CS

		HWPD形式のスプライトを表示します。X,Y独立ズーム、回転が
		できます。表示が高速ですが、拡大や回転の時にドットにすきま
		ができてしまうことがあります。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  3 / hcel2 XX,YY,SX,SY,ANG,ZX,ZY,CS

		HWPD形式のスプライトを表示します。X,Y独立ズーム、回転が
		できます。拡大や回転もきれいに表示してくれますが、表示に
		少し時間がかかってしまいます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  4 / cel XX,YY,SX,SY,ANG,ZX,ZY,CS

		WPD形式のスプライトを表示します。X,Y独立ズーム、回転が
		できます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  5 / rot2 XX,YY,ANG,ZX,CS

		WPD形式の背景を表示します。ズーム、回転ができます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  6 / rot XX,YY,ZX,ZY,CS

		WPD形式の背景を表示します。X,Y方向の独立ズームができます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  7 / zrot	XX,YY,CS

		WPD形式の背景を表示します。背景は３Ｄっぽく倒しこまれて
		表示されます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  8 / bcls XX

		WPD,HWPDモードの背景をXXで指定した色でクリアします。

	  ・ｼｰｹﾝｽｺｰﾄﾞ  9 / putv XX,YY,SX,SY,CS

		get命令で取りこんだ合成CHRを指定した場所に表示します。
		透明色での重ね合わせが可能です。

	  ・ｼｰｹﾝｽｺｰﾄﾞ 10 / mput XX,YY,SX,SY,CS

		get命令で取りこんだ合成CHRを指定した場所に表示します。
		ただし、マスク画面の奥に表示します。

	  ・ｼｰｹﾝｽｺｰﾄﾞ 11 / lput XX,YY,SX,SY,CS,ANG

		lget命令で取りこんだCHRを指定した場所に表示します。
		ANGは有効プレーンの指定になります。通常は15を指定して下さい。

	  ・ｼｰｹﾝｽｺｰﾄﾞ 12 / vcls XX

		現在の画面をXXで指定した色でクリアします。

	  ・ｼｰｹﾝｽｺｰﾄﾞ 13 / palet XX,ANG

		XXで指定したパレットをANGで指定した色コードに変えます。

	  ・ｼｰｹﾝｽｺｰﾄﾞ 14 / prot2 XX,YY,ANG,ZX,CS

		rot2と同じですが、画面の4/1区画しか表示されません。
		特殊な効果を出したい時に使用します。


