/*---------------------------------------------------------------------------
	ＭＯＳヘルプドキュメント
	pc98 mouse operating system routines "mos.h" / 1994(c)onion software
	'mos.h' , 'mos.obj'
---------------------------------------------------------------------------*/

	MOSはPC98のマウスを入力デバイスに使用したアプリケーションをＣ言語で作る
	ためのモジュールで、次のような特徴があります。

		◎24x24ﾄﾞｯﾄ 16色のキャラクタで位置を表示
		◎マウスカーソルをカーソルキーやテンキーでも操作可能
		◎ダイアログボックスの領域設定と判定が可能
		◎ちらつきのない高速マウスカーソル表示方式を採用
		◎GRCG,EGCなどを一切使用しないので互換機での動作も保証
		◎マウスドライバの存在に関係なく使用が可能
		◎CPUに負担をかけないやさしい割り込み処理を実現


	/*-------------------------------------------------------------------
		introduction
	-------------------------------------------------------------------*/

	"MOS" ('mos.obj') は、PC9801用のマウス制御、カーソル表示等を
	サポートするBorland TurboＣ(++)用の関数群です。
	使用する場合は、

		#include "mos.h"		; use graphics interface

	のファイルを最初にインクルードしておく必要があります。
	必ずスモールモデルでコンパイルして下さい。
	"mos.h"を使う場合は、1つのオブジェクトファイルもリンクします。

	例:（コマンドラインから）
		tcc -ms test.c mos.obj


	このシステムでは、マウスによるカーソル制御の他にキー入力による
	マウスカーソルの制御が可能です。キー操作は以下の通りになります。

		[8][↑]		カーソル上移動
		[2][↓]		カーソル下移動
		[4][←]		カーソル左移動
		[6][→]		カーソル右移動
		[SHIFT]+移動	カーソル高速移動

		[X]		マウス左ボタンと同じ
		[Z]		マウス右ボタンと同じ

	移動のキーを押しっぱなしにしておくと、移動スピードが多少上がり
	ます（オートフライング機能）。


	/*-------------------------------------------------------------------
		command reference of "mos.h"
	-------------------------------------------------------------------*/

	◎マウス初期化

		void ms_init( int vbseg );

		vbseg	= allocmemで確保したワーク用バッファの先頭セグメント

	　マウスの初期設定を行ない使用可能な状態にします。
	　最初に必ずこの関数を使って初期化を行なって下さい。
	　INT6（マウス割り込み）が設定されマウスの座標、移動量、ボタン情報が
	　読み取れるようになります。
	　これ以降は以下の変数を使っていつでもマウスの情報を得ることが
	　できます。

	  int ms_xx		マウスカーソルのX座標（0〜639）
	  int ms_yy		マウスカーソルのY座標（0〜399）
	  int ms_px		マウスのX方向移動量
	  int ms_py		マウスのY方向移動量
	  int ms_key		ボタンの状態*
	  int ms_trg		ボタンのトリガー入力**

	 *ボタン状態の値は次のようになっています

				右ボタン（または[Z]キー）	128
				左ボタン（または[X]キー）	 64
				[ESC]キー			 32
				スペースキー			 16

	**トリガー入力の値も上と同じですが、押した瞬間にだけ値が
	　変わり、ボタンを離すまでは次の入力をしません。

	　vbseg はバッファのセグメントを渡します。このシステムでは、
	　最低1000Hのバッファが必要なので、

		allocmem( 0x100, &vbseg );
		ms_init( vbseg );

	　というふうに最初にメモリを確保しておかなければなりません。
	　この初期化では、マウスの移動範囲は画面全体に、マウスカーソル
	　キャラクタはシステム付属（矢印）のものが設定されます。

	　また、このシステムの使用が終了したら必ず ms_done()で割り込み
	　ベクタをもとの状態に戻すのを忘れないで下さい。


	◎移動範囲設定

		void	ms_area( int winsx, int winsy, int winex, int winey );

		winsx , winsy	= 移動範囲の左上座標
		winex , winey	= 移動範囲の右下座標

	　マウスカーソルが移動できる範囲を設定します。
	　初期化の後は全画面(0,0)-(639,399)に設定されています。
	　移動範囲の設定を行なうと、マウスカーソルの位置は範囲の左上座標に
	　再設定されます。
	　範囲のチェックをしていないので、右下が(639,399)を越えることの
	　ないように注意して下さい。winey が400を越えると暴走する危険性が
	　あります。


	◎表示範囲設定

		void	ms_clip( int clpsx, int clpsy, int clpex, int clpey );

		clpsx , clpsy	= 表示範囲の左上座標
		clpex , clpey	= 表示範囲の右下座標

	　マウスカーソルが表示される範囲を設定します。
	　設定した範囲からはカーソルのキャラクタがはみ出さなくなります。
	　表示範囲と移動範囲は別々に設定されるので、移動範囲が表示範囲より
	　大きくならないように注意して下さい。
	　初期化の後は全画面(0,0)-(639,399)に設定されています。
	　clpsx は 8の倍数 の値しか設定できません。
	　clpex は 8の倍数-1 の値しか設定できません。


	◎マウスカーソル再設定

		void	ms_reset( int xx, int yy );

		xx	= マウスカーソルX座標(0〜639)
		yy	= マウスカーソルY座標(0〜399)

	　マウスカーソルの位置を再設定するとともに、ワークの初期化をします。
	　画面を更新した時などに使用します。
	　再設定を行なうと、チェックボックスの設定がすべて初期化され、
	　指定した座標にカーソルが表示されます。
	　いままでのカーソル表示や座標はすべて無効になります。


	◎マウスカーソル座標設定

		void	ms_locate( int xx, int yy );

		xx	= マウスカーソルX座標(0〜639)
		yy	= マウスカーソルY座標(0〜399)

	　マウスカーソルの位置を指定した座標に移動させます。


	◎カーソルコントロール設定

		void	ms_ctrl( int flag );

		flag	= 0  コントロール禁止
			= 1  マウス・キーによるコントロール
			= 2  マウスによるコントロール

	　マウスカーソルをコントロールするデバイスを設定します。
	　初期化の後は1に設定されています。


	◎カーソルキャラクタ設定

		void	ms_chr( int code, int haj_x, int haj_y );

		code	= キャラクタ・コード
		haj_x	= 表示位置補正値X (0〜23)
		haj_y	= 表示位置補正値Y (0〜23)

	　マウスカーソルのキャラクタを指定したものに変えます。
	　キャラクタのデータ*はあらかじめ vbseg で指定したセグメント+100H
	　（オフセットアドレス 1000H）にロードされている必要があります。
	　code は何番目のキャラクタかを指定します。
	　haj_x , haj_y の補正値は、指定したカーソルキャラクタが指す場所
	　（矢印なら左上を指している）を補正するためのもので、24x24の
	　キャラクタの中のどの位置が中心になるかを指定します。

	　code に -1を指定するとシステム付属の矢印キャラクタになります。
	　その場合は、ms_chr( -1,1,1 ); と指定して下さい。

	 *キャラクタデータは32x24の4プレーン分のデータで１つ（384bytes）
	　のキャラクタになります。透明色は必ずカラーコード0になります。


	◎マウスカーソル表示更新

		void	ms_proc();

	　マウスカーソルの表示、移動、キー入力などを行ないます。
	　マウスカーソルを使うプログラムのメインループで常に呼び出す
	　ようにして下さい。
	　カーソルの座標は割り込みによって常に変化しますが、
	　マウスカーソルの表示とキーによる移動は、ms_proc(); を実行しない
	　と実行されません。


	◎マウスカーソル消去

		void	ms_wipe();

	　画面の更新、一時的な表示の中止をするためにマウスカーソルを
	　消去します。


	◎マウスシステム終了

		void	ms_done();

	　システムの使用を終了します。
	　マウスカーソルを消去し、マウスの割り込みを止めて
	　ベクタをもとの状態に戻します。
	　プログラムを終了する前に必ず実行して下さい。


	◎チェックボックス初期化

		void	ms_cinit( int cb_seg, int cb_kazz );

		cb_seg	= ワークエリア先頭セグメント
		cb_kazz	= チェックボックスの最大数

	　チェックボックスのワークエリアの指定、初期化を行ないます。
	　ms_initで初期化した後は、vbseg で指定したワークエリア内に
	　最大25個のチェックボックスを指定できる状態になっています。
	　それよりも多いチェックボックスを指定する場合などに、
	　ms_cinitを使用して下さい。25個以内のチェックボックスの指定
	　では必要ありません。
	　また、チェックボックスの初期化を行なうためには、通常はms_reset
	　を使用して下さい。


	◎チェックボックス設定

		void	ms_cset( int cbno, int cbflg, int cbxx, int cbyy,
				 int cblx, int cbly );

		cbno	= チェックボックス番号(0〜??)
		cbflg	= フラグコード(0000H〜FFFEH) ( FFFFH=無効 )
		cbxx	= チェックボックス左上Ｘ座標(0〜639)
		cbyy	= チェックボックス左上Ｙ座標(0〜399)
		cblx	= チェックボックス右下Ｘ座標(0〜639)
		cbly	= チェックボックス右下Ｙ座標(0〜399)

	　チェックボックスの設定をします。
	　チェックボックスとは、マウスカーソルが範囲内にあるかどうかを
	　判定できるデータのことで、画面上には直接表示されません。
	　クリックする範囲や、マウスカーソルのある位置を確認するのが
	　容易になります。
	　チェックボックスは通常同時に25個まで登録でき（ms_cinitで拡張
	　することもできます）、cbno でその番号を指定します。
	　cbflg はデータの区別をするためのフラグを登録するためのものです。
	　通常は0を指定して下さい。-1を指定すると、そのチェックボックス
	　は無効になります。
	　cbxx,cbyy,cblx,cbly でチェックボックスの範囲を指定します。
	　これで以後は、ms_cboxでマウスカーソルがどの番号のチェックボックス
	　の範囲内にあるかを検索することができます。


	◎フラグコード取得

		int	ms_cget( int cbno );

		cbno	= チェックボックス番号(0〜??)

	　指定したチェックボックスのフラグコードを取得します。
	　cbno でチェックボックスの番号を指定します。返り値がフラグコード
	　になります。


	◎チェックボックス検索

		int	ms_cbox();

	　マウスカーソルが範囲内にあるチェックボックスを検索します。
	　返り値が検索に成功したチェックボックスの番号になります。
	　どのチェックボックスの範囲にも入っていない場合は、-1が返ります。
	　複数のチェックボックス範囲内にある場合は、番号の小さいものが
	　優先されて返ります。


	/*-------------------------------------------------------------------
		copyright
	-------------------------------------------------------------------*/


	'mos.h','mos.obj'			(c)1994 onion software
						   special thanks to Ana.

/*---------------------------------------------------------------------------
	pc98 mouse operating system  "mos.h" / 1994(c)onion software
	Brief information of 'mos.obj'
---------------------------------------------------------------------------*/

